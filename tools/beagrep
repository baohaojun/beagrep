#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use feature 'signatures';
no warnings "experimental::signatures";


use Cwd 'realpath';
use File::Path;
use String::ShellQuote;
$ENV{'LANG'} = 'C';
$ENV{'LC_ALL'} = 'C'; # fix grep too slow when ignore_case and gbk file recognized as binary

delete $ENV{GREP_OPTIONS};
if (not -e "/usr/local/bin/mkbeagrepidx") {
    eval qx(cat ~/src/github/beagrep/.setenv.pl);
}

my @saved_args = @ARGV;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl \
# @:entering-dir \
# @:beagrep-from-dir \
# @:abc-base \
# @top-code-dir \
# a:additional-tokens='$ENV{BEAGREP_ADDITIONAL_TOKENS}' \
# t:use-tokens \
# e:regexp-pat \
# p:path-pat='"."' \
# @perl-style-regexp \
# @:grep-additional-opts \
# v:reverse-path-filter='"^\$"' \
# d:source-dir \
# iignore-case \
# ffind-file-only \
# llist-beagrep \
# oonly-grep-myself \
# sshort-format \
# @:replace-with \
# @is-beagrep '?"测试当前目录是否有 beagrep 索引数据"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $abc_base = "";
my $additional_tokens = $ENV{BEAGREP_ADDITIONAL_TOKENS};
my $beagrep_from_dir = "";
my $entering_dir = "";
my $find_file_only = 0;
my $grep_additional_opts = "";
my $ignore_case = 0;
my $is_beagrep = 0;
my $list_beagrep = 0;
my $only_grep_myself = 0;
my $path_pat = ".";
my $perl_style_regexp = 0;
my $regexp_pat = "";
my $replace_with = "";
my $reverse_path_filter = "^\$";
my $short_format = 0;
my $source_dir = "";
my $top_code_dir = 0;
my $use_tokens = "";

my $handler_help = sub {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '';
  printf "%-24s", '--abc-base=ABC-BASE';
  if (length('--abc-base=ABC-BASE') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-a, ';
  printf "%-24s", '--additional-tokens=ADDITIONAL-TOKENS';
  if (length('--additional-tokens=ADDITIONAL-TOKENS') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--beagrep-from-dir=BEAGREP-FROM-DIR';
  if (length('--beagrep-from-dir=BEAGREP-FROM-DIR') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--entering-dir=ENTERING-DIR';
  if (length('--entering-dir=ENTERING-DIR') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-f, ';
  printf "%-24s", '--[no]find-file-only';
  if (length('--[no]find-file-only') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--grep-additional-opts=GREP-ADDITIONAL-OPTS';
  if (length('--grep-additional-opts=GREP-ADDITIONAL-OPTS') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-i, ';
  printf "%-24s", '--[no]ignore-case';
  if (length('--[no]ignore-case') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--[no]is-beagrep';
  if (length('--[no]is-beagrep') > 24 and length("测试当前目录是否有 beagrep 索引数据") > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", "测试当前目录是否有 beagrep 索引数据";
  print "\n";
  printf "%6s", '-l, ';
  printf "%-24s", '--[no]list-beagrep';
  if (length('--[no]list-beagrep') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-o, ';
  printf "%-24s", '--[no]only-grep-myself';
  if (length('--[no]only-grep-myself') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-p, ';
  printf "%-24s", '--path-pat=PATH-PAT';
  if (length('--path-pat=PATH-PAT') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--[no]perl-style-regexp';
  if (length('--[no]perl-style-regexp') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-e, ';
  printf "%-24s", '--regexp-pat=REGEXP-PAT';
  if (length('--regexp-pat=REGEXP-PAT') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--replace-with=REPLACE-WITH';
  if (length('--replace-with=REPLACE-WITH') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-v, ';
  printf "%-24s", '--reverse-path-filter=REVERSE-PATH-FILTER';
  if (length('--reverse-path-filter=REVERSE-PATH-FILTER') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-s, ';
  printf "%-24s", '--[no]short-format';
  if (length('--[no]short-format') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-d, ';
  printf "%-24s", '--source-dir=SOURCE-DIR';
  if (length('--source-dir=SOURCE-DIR') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '';
  printf "%-24s", '--[no]top-code-dir';
  if (length('--[no]top-code-dir') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-t, ';
  printf "%-24s", '--use-tokens=USE-TOKENS';
  if (length('--use-tokens=USE-TOKENS') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  my $exit_value = 0;
  if (@_ && $_[0] ne "help" && $_[1] != 1) {
    $exit_value = shift @_;
    print "@_\n";
  }

  exit($exit_value);
};

GetOptions (
            'abc-base=s' => \$abc_base,
            'additional-tokens|a=s' => \$additional_tokens,
            'beagrep-from-dir=s' => \$beagrep_from_dir,
            'entering-dir=s' => \$entering_dir,
            'find-file-only|f!' => \$find_file_only,
            'grep-additional-opts=s' => \$grep_additional_opts,
            'ignore-case|i!' => \$ignore_case,
            'is-beagrep!' => \$is_beagrep,
            'list-beagrep|l!' => \$list_beagrep,
            'only-grep-myself|o!' => \$only_grep_myself,
            'path-pat|p=s' => \$path_pat,
            'perl-style-regexp!' => \$perl_style_regexp,
            'regexp-pat|e=s' => \$regexp_pat,
            'replace-with=s' => \$replace_with,
            'reverse-path-filter|v=s' => \$reverse_path_filter,
            'short-format|s!' => \$short_format,
            'source-dir|d=s' => \$source_dir,
            'top-code-dir!' => \$top_code_dir,
            'use-tokens|t=s' => \$use_tokens,
            'help|h!' => \&$handler_help,
           );


## end generated code


my @fallback_dirs;
my $file_default_line = 1;
my $file_tag = "";

open(my $log, ">>", "$ENV{HOME}/.beagrep.log") or die "Error openning log";
print $log "$0 @ARGV in " . $ENV{PWD} . "\n";

mkpath "$ENV{HOME}/.cache/system-config/logs";
open(my $debuglog, ">", "$ENV{HOME}/.cache/system-config/logs/beagrep.log") or die "Error openning log";

sub debug(@args) {
    print $debuglog "@args\n";
}

my $pwd = realpath(".");
if ($source_dir) {
  $pwd = realpath $source_dir;
}
chdir $pwd or die "$pwd: $!";

my $pwd_save = $pwd;
my $cache_dir = "$ENV{HOME}/.cache/system-config/for-code-reading";
my $db_dir = "$cache_dir/$pwd";
if ($beagrep_from_dir) {
    $beagrep_from_dir = realpath $beagrep_from_dir;
    $db_dir = "$cache_dir/$beagrep_from_dir";
    if (not $top_code_dir) {
        die "with --beagrep-from-dir $beagrep_from_dir, you must specify top_code_dir with -T"
    } else {
        $pwd = realpath $top_code_dir;
    }
}
while (! -d "$db_dir/.beagrep") {
    debug "no beagrep db at $db_dir";
    $pwd =~ s!(.*)/.*!$1!;
    if (not $pwd or $pwd eq "/") {
        $pwd = qx(lookup-file -e .repo);
        if ($pwd) {
            $pwd =~ s/.repo$//;
            $db_dir = "$cache_dir/$pwd";
            last;
        } else {
            die "Can not find beagrep data for $pwd_save";
        }
    }
    $db_dir = "$cache_dir/$pwd";
    debug "change db to $db_dir";
}
debug "found beagrep db at $db_dir";

if ($is_beagrep) {
    exit 0
}

if ($source_dir) {
    $abc_base = "";
  }

if (not $regexp_pat and @ARGV == 1) {
  $regexp_pat = $ARGV[0];
  shift;
}

if (@ARGV) {
  if ($ARGV[0] eq "/dev/null" && scalar(@ARGV) == 1) {
    shift;
  } else {
    die "Don't know how to handle extra args: @ARGV";
  }
}

if ($replace_with) {
    my $char_1 = substr($replace_with, 0, 1);
    my @parts = split($char_1, $replace_with);
    my $re = $parts[1];
    my $with = $parts[2];
    $regexp_pat =~ s/$re/$with/;
}

if ($ignore_case) {
  $ignore_case = '-i';
} else {
  $ignore_case = '';
}

if ($perl_style_regexp) {
    $perl_style_regexp = '-P';
} else {
    $perl_style_regexp = '';
}

die 'no regexp specified' unless $regexp_pat ne "";

my $pat_implicit_path = $regexp_pat;

if ($find_file_only) {
  $ENV{FIND_FILE_ONLY} = 1;
  if ($regexp_pat =~ m/:([0-9]+)$/) { #hack for using beagrep in java-bt-mode
      $file_default_line = $1;
      $regexp_pat = substr($regexp_pat, 0, rindex($regexp_pat, ':'));
      if ($regexp_pat =~ m/(.*)\(/) {
          $file_tag = $1;
          $regexp_pat = substr($regexp_pat, index($regexp_pat, '(') + 1);
      }
      $pat_implicit_path = $regexp_pat;
  }
  $regexp_pat =~ s,.*/,,; #beagrep can only find a filename, not a path name.
  $pat_implicit_path = $regexp_pat;
}

if ($pat_implicit_path =~ m/\(|\)/) {
    # hack for fixing unexpected error messages when we actually
    # should not do implicit path matching
    $pat_implicit_path = "^it can not be a path pat, do not bother!";
}

$regexp_pat = shell_quote($regexp_pat);
debug "pat is: $regexp_pat.\n";

# debug "beagrep query argument `[01;31m"
#   . substr(qx/beagrep-get-tokens $regexp_pat/, 0, -1)
#   . "[0m'\n";

my $beagrep_files_cmd = "beagrep-files -- $use_tokens";
if (not $use_tokens) {
    $beagrep_files_cmd = "beagrep-files -- $regexp_pat $additional_tokens";
}

my $beagrep_files_pipe;
if ($abc_base) {
    open($beagrep_files_pipe, "-|", "abc-x", "-b", "$abc_base", "abc-files", "$regexp_pat $additional_tokens");
} else {
    open($beagrep_files_pipe, "-|", $beagrep_files_cmd);
    debug "pipe cmd is: '$beagrep_files_cmd'"
}

my %all_db_dirs =
  (
   $db_dir => 1,
  );

sub get_all_fallback_dirs($db_dir) {
  my @extra_dirs = grep {
    if (not $all_db_dirs{$_}) {
      $all_db_dirs{$_} = 1;
      1;
    } else {
      0;
    }
  } map {
    $_ = realpath $_;
  } glob("$db_dir/.beagrep-fallback.*");

  if (@extra_dirs) {
    debug "We have found fall back dirs: @extra_dirs\n";
    push @fallback_dirs, @extra_dirs;
    map {
      get_all_fallback_dirs($_)
    } @extra_dirs;
  } else {
    debug "We have no fallbacks at $db_dir/.beagrep-fallback.*"
  }
}

get_all_fallback_dirs($db_dir);

chdir $pwd;
chomp($pwd = qx/pwd -P/);
my $start = length($pwd) + 1;
if ($short_format) {
    printf "Using short format, Entering directory \`%s'\n", ($entering_dir or $pwd);
}

if ($list_beagrep) {
  while (<$beagrep_files_pipe>) {
    $_ = substr($_, $start) if ($short_format and not $abc_base);
    chomp;
    print "$_:$file_default_line: [01;31m****************![0m\n";
  }
  exit 0;
}

my @beagrep_files;
my $grep;
if (!$find_file_only) {
    open($grep, "|xargs -d '\\n' -- grep -e $regexp_pat -H -n -I $ignore_case $grep_additional_opts $perl_style_regexp|(cut-long-lines||cat)");
}

while (<$beagrep_files_pipe>) {
    chomp;
    $_ = substr($_, $start) if ($short_format and not $abc_base);
    push @beagrep_files, $_;
    next unless m/$path_pat/i;
    next if m/$reverse_path_filter/i;
    next unless -f $_;
    print $grep "$_\n" unless $find_file_only;
}

close $grep unless $find_file_only;
# perldoc -f close, search for wait, the "xargs grep"
# subprocess is finished when this returns

#see [[http://baohaojun.wordpress.com/2010/05/06/beagrep-grep-sh%E5%8A%9F%E8%83%BD%E5%8F%88%E5%8F%98%E5%BC%BA%E5%A4%A7%E4%BA%86/]] for why
if ($find_file_only || 1) {
    my %path_match_set;
    debug "pat_implicit_path is $pat_implicit_path, path_pat is $path_pat";
    for (@beagrep_files) {
        $path_match_set{$_} = 1 if m/$pat_implicit_path/i and m/$path_pat/i;
        if (not $path_match_set{$_} and -l $_) {
            my $t = readlink($_);
            $path_match_set{$_} = 2 if $t =~ m/$pat_implicit_path/i and $t =~ m/$path_pat/i;
        }

    }
    if ($find_file_only && keys %path_match_set > 1 && $file_tag) {
        my $files = qx(grep-gtags -e $file_tag|perl -ne "if (m/:[0-9]+:/) {s/:[0-9]+:.*//; print}"|sort -u);
        my @files = split("\n", $files);
        for (@files) {
            print "$_:$file_default_line: [01;31m****************![0m\n"
                if $path_match_set{$_} and m,/$pat_implicit_path$,; # the `and' part is to make file name match totally
        }
    } else {
        for (sort keys %path_match_set) {
            my $line = $file_default_line + $path_match_set{$_} - 1;
            print "$_:$line: [01;31m****************![0m\n";
        }
    }
}

if (@fallback_dirs and not $ENV{DOING_BEAGREP_FALLBACK} and not $only_grep_myself) {
    $ENV{DOING_BEAGREP_FALLBACK} = 1;
    for (@fallback_dirs) {
        $_ =~ s,/.*\.cache/system-config/for-code-reading,,;
        chdir $_ or die "Can't chdir to $_";
        $ENV{PWD} = $_;
        system("beagrep", @saved_args, "-d", "$_");
    }
}
